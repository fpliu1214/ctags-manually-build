name: manually build uctags for windows via MSYS2/MINGW64

on:
  workflow_dispatch:
    inputs:
      target-arch:
        description: choose a target arch to be built for
        type: choice
        options:
          - x86_64

      enable-manpages:
        description: whether to generate manpages
        type: boolean
        default: false

      enable-htmldocs:
        description: whether to generate htmldocs
        type: boolean
        default: false

      enable-json:
        description: whether to enable json support
        type: boolean
        default: true

      enable-yaml:
        description: whether to enable yaml support
        type: boolean
        default: true

      enable-xml:
        description: whether to enable xml support
        type: boolean
        default: true

      enable-libiconv:
        description: whether to enable libiconv support
        type: boolean
        default: true

      enable-threads:
        description: whether to enable threads support
        type: boolean
        default: true

      enable-largefile:
        description: whether to enable large file support
        type: boolean
        default: true

      regex-backend:
        description: choose a regex backend to be built with
        type: choice
        options:
          - none
          - gnu-regex
          - pcre2
        default: gnu-regex

jobs:
  build:

    runs-on: windows-2022

    steps:
      - name: build
        run: |
          unset IFS

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          run() {
              printf '%b\n' "${COLOR_PURPLE}==>${COLOR_OFF} ${COLOR_GREEN}$*${COLOR_OFF}"
              eval "$@"
          }

          unset DEP_PKG
          unset CONFIGURE_ARGS

          if [ '${{ github.event.inputs.enable-threads }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-threads"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-threads"
          fi

          if [ '${{ github.event.inputs.enable-largefile }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-largefile"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-largefile"
          fi

          if [ '${{ github.event.inputs.enable-json }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-json"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-json"
              DEP_PKG="$DEP_PKG jansson"
          fi

          if [ '${{ github.event.inputs.enable-yaml }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-yaml"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-yaml"
              DEP_PKG="$DEP_PKG libyaml"
          fi

          if [ '${{ github.event.inputs.enable-xml }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-xml"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-xml"
              DEP_PKG="$DEP_PKG libxml2"
          fi

          if [ '${{ github.event.inputs.enable-libiconv }}' = 'false' ] ; then
              CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-iconv"
          else
              CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-iconv"
          fi

          case ${{ github.event.inputs.regex-backend }} in
              none)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-pcre2 --without-included-regex"
                ;;
              gnu-regex)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --disable-pcre2 --with-included-regex"
                ;;
              pcre2)
                CONFIGURE_ARGS="$CONFIGURE_ARGS --enable-pcre2"
                DEP_PKG="$DEP_PKG pcre2"
                ;;
              *) echo "unexpected regex-backend: ${{ github.event.inputs.regex-backend }}"
          esac

          run pacman -Syy --noconfirm
          run pacman -S   --noconfirm automake autoconf make pkg-config mingw-w64-x86_64-toolchain python3 file zip git

          for item in $DEP_PKG
          do
              run pacman -S --noconfirm "mingw-w64-x86_64-$item"
          done

          if [ "${{ github.event.inputs.enable-manpages }}" = true ] ; then
              run pip3 install -U docutils
          fi

          if [ "${{ github.event.inputs.enable-htmldocs }}" = true ] ; then
              run pip3 install -U sphinx
          fi

          run git config --global core.autocrlf input
          run git clone --depth=1 https://github.com/universal-ctags/ctags
          run cd ctags
          run ./autogen.sh
          run ./configure --disable-external-sort --enable-static $CONFIGURE_ARGS --prefix=$PWD/out
          run make -j2
          run make install

          run ls -l

          run file ctags.exe
          run ldd  ctags.exe

          run ./ctags.exe --version

          TIMESTAMP="$(date +%Y.%m.%d.%H.%M.%S)"
          OUTPUT_DIR="uctags-${TIMESTAMP}-windows-${{ github.event.inputs.target-arch }}"

          run mv -v out "$OUTPUT_DIR"

          if [ "${{ github.event.inputs.enable-htmldocs }}" = true ] ; then
              run make -C docs html
              install -v -d          "$OUTPUT_DIR/share/doc/"
              mv -v docs/_build/html "$OUTPUT_DIR/share/doc/"
          fi

          run zip -9 -r "${OUTPUT_DIR}.zip" "$OUTPUT_DIR"

          run mv -v "${OUTPUT_DIR}.zip" ../
        shell: C:\msys64\msys2_shell.cmd -no-start -defterm -mingw64 -here -full-path -shell bash -e -x {0}

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---windows-${{ github.event.inputs.target-arch }}.zip
          path: uctags-*-windows-${{ github.event.inputs.target-arch }}.zip
